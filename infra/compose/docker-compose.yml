services:
  # Airflow services
  airflow-webserver:
    image: apache/airflow:2.7.1
    command: bash -c "airflow db upgrade && airflow webserver"
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__SECRET_KEY=your-secret-key-here
      - AIRFLOW__WEBSERVER__WORKERS=2
      - AIRFLOW_HOME=/opt/airflow
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
    volumes:
      - ../../airflow/dags:/opt/airflow/dags
      - ../../spark_jobs:/opt/airflow/spark_jobs
      - ../../data:/opt/airflow/data
      - ../../ml:/opt/airflow/ml
      - airflow_logs:/opt/airflow/logs
    user: "${AIRFLOW_UID:-50000}:0"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-scheduler:
    image: apache/airflow:2.7.1
    command: bash -c "airflow db upgrade && airflow scheduler"
    environment:
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    volumes:
      - ../../airflow/dags:/opt/airflow/dags
      - ../../spark_jobs:/opt/airflow/spark_jobs
      - ../../data:/opt/airflow/data
      - ../../ml:/opt/airflow/ml
      - airflow_logs:/opt/airflow/logs
    user: "${AIRFLOW_UID:-50000}"
    depends_on:
      postgres:
        condition: service_healthy

  # Spark services
  spark-master:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8090:8080"
      - "7077:7077"
    volumes:
      - ../../spark_jobs:/opt/spark/jobs
      - ../../data:/data

  spark-worker:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
    volumes:
      - ../../spark_jobs:/opt/spark/jobs
      - ../../data:/data
    depends_on:
      - spark-master

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL (for Airflow metadata and data warehouse)
  postgres:
    image: postgres:14
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MLflow tracking server
  mlflow:
    image: ghcr.io/mlflow/mlflow:v2.7.1
    ports:
      - "5000:5000"
    command: mlflow server --host 0.0.0.0 --backend-store-uri postgresql://airflow:airflow@postgres:5432/mlflow --default-artifact-root s3://mlflow/
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
    depends_on:
      - postgres
      - minio

  # Streamlit dashboard
  streamlit:
    build:
      context: ../../dashboards
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    volumes:
      - ../../dashboards:/app
    depends_on:
      - postgres
      - mlflow

volumes:
  postgres_data:
  minio_data:
  airflow_logs:
